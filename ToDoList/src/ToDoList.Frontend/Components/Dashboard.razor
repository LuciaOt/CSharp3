@using ToDoList.Domain.Models
@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer
<style>
    th {
        background-color: blueviolet;
        color: aliceblue;
        font-weight: bold;
        cursor: pointer;

    }
</style>
<h1>Dashboard</h1>

<table>
    <thead>
        <tr>
            <th @onclick="SortItemsByID">ID @(idSortAscending ? "▲" : "▼")</th>
            <th @onclick="SortItemsByName">Name @(nameSortAscending ? "▲" : "▼")</th>
            <th>Description</th>
            <th>IsCompleted</th>
            <th>Category</th>
        </tr>
    </thead>

    @foreach (var toDoItem in toDoItems)
    {
        <tr>
            <td>@toDoItem.ToDoItemId</td>
            <td>@toDoItem.Name</td>
            <td>@toDoItem.Description</td>
            <td>@toDoItem.IsCompleted</td>
            <td>@toDoItem.Category</td>
        </tr>
    }

</table>



@code
{
    protected override void OnInitialized()
    {
        toDoItems = ToDoItemsClient.ReadItems();
    }

    @* protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    } *@

    private List<ToDoItemView>? toDoItems;

    private bool idSortAscending = true;
    private bool nameSortAscending = true;
    private void SortItemsByID()
    {
        if (idSortAscending)
        {
            toDoItems = toDoItems.OrderBy(item => item.ToDoItemId).ToList();
        }
        else
        {
            toDoItems = toDoItems.OrderByDescending(item => item.ToDoItemId).ToList();
        }
        idSortAscending = !idSortAscending;
    }

    private void SortItemsByName()
    {
        if (nameSortAscending)
        {
            toDoItems = toDoItems.OrderBy(item => item.Name).ToList();
        }
        else
        {
            toDoItems = toDoItems.OrderByDescending(item => item.Name).ToList();
        }
        nameSortAscending = !nameSortAscending;
    }
}
